!function(t){"function"==typeof define&&define.amd?define(["dependencyLib"],t):"object"==typeof exports?module.exports=t(require("./dependencyLib")):t(window.dependencyLib||jQuery)}(function($){function Inputmask(t){this.el=void 0,this.opts=$.extend(!0,{},this.defaults,t),this.noMasksCache=t&&void 0!==t.definitions,this.userOptions=t||{},resolveAlias(this.opts.alias,t,this.opts)}function isInputEventSupported(t){var e=document.createElement("input"),i="on"+t,n=i in e;return n||(e.setAttribute(i,"return;"),n="function"==typeof e[i]),e=null,n}function isInputTypeSupported(t){var e="text"===t||"tel"===t||"password"===t;if(!e){var i=document.createElement("input");i.setAttribute("type",t),e="text"===i.type,i=null}return e}function resolveAlias(t,e,i){var n=i.aliases[t];return n?(n.alias&&resolveAlias(n.alias,void 0,i),$.extend(!0,i,n),$.extend(!0,i,e),!0):(null===i.mask&&(i.mask=t),!1)}function importAttributeOptions(npt,opts,userOptions){function importOption(option){var optionData=npt.getAttribute("data-inputmask-"+option.toLowerCase());null!==optionData&&(optionData="boolean"==typeof optionData?optionData:optionData.toString(),"string"==typeof optionData&&0===option.indexOf("on")&&(optionData=eval("("+optionData+")")),"mask"===option&&0===optionData.indexOf("[")?(userOptions[option]=optionData.replace(/[\s[\]]/g,"").split(","),userOptions[option][0]=userOptions[option][0].replace("'",""),userOptions[option][userOptions[option].length-1]=userOptions[option][userOptions[option].length-1].replace("'","")):userOptions[option]=optionData)}var attrOptions=npt.getAttribute("data-inputmask");if(attrOptions&&""!==attrOptions)try{attrOptions=attrOptions.replace(new RegExp("'","g"),'"');var dataoptions=$.parseJSON("{"+attrOptions+"}");$.extend(!0,userOptions,dataoptions)}catch(ex){}for(var option in opts)importOption(option);if(userOptions.alias){resolveAlias(userOptions.alias,userOptions,opts);for(option in opts)importOption(option)}return $.extend(!0,opts,userOptions),opts}function generateMaskSet(t,e){function i(e){function i(t,e,i,n){this.matches=[],this.isGroup=t||!1,this.isOptional=e||!1,this.isQuantifier=i||!1,this.isAlternator=n||!1,this.quantifier={min:1,max:1}}function n(e,i,n){var a=t.definitions[i];n=void 0!==n?n:e.matches.length;var o=e.matches[n-1];if(a&&!h){a.placeholder=$.isFunction(a.placeholder)?a.placeholder.call(this,t):a.placeholder;for(var r=a.prevalidator,s=r?r.length:0,l=1;l<a.cardinality;l++){var u=s>=l?r[l-1]:[],p=u.validator,c=u.cardinality;e.matches.splice(n++,0,{fn:p?"string"==typeof p?new RegExp(p):new function(){this.test=p}:new RegExp("."),cardinality:c?c:1,optionality:e.isOptional,newBlockMarker:void 0===o||o.def!==(a.definitionSymbol||i),casing:a.casing,def:a.definitionSymbol||i,placeholder:a.placeholder,mask:i}),o=e.matches[n-1]}e.matches.splice(n++,0,{fn:a.validator?"string"==typeof a.validator?new RegExp(a.validator):new function(){this.test=a.validator}:new RegExp("."),cardinality:a.cardinality,optionality:e.isOptional,newBlockMarker:void 0===o||o.def!==(a.definitionSymbol||i),casing:a.casing,def:a.definitionSymbol||i,placeholder:a.placeholder,mask:i})}else e.matches.splice(n++,0,{fn:null,cardinality:0,optionality:e.isOptional,newBlockMarker:void 0===o||o.def!==i,casing:null,def:i,placeholder:void 0,mask:i}),h=!1}function a(e,i){e.isGroup&&(e.isGroup=!1,n(e,t.groupmarker.start,0),i!==!0&&n(e,t.groupmarker.end))}function o(t,e,i,o){e.matches.length>0&&(void 0===o||o)&&(i=e.matches[e.matches.length-1],a(i)),n(e,t)}function r(){if(g.length>0){if(c=g[g.length-1],o(u,c,f,!c.isAlternator),c.isAlternator){d=g.pop();for(var t=0;t<d.matches.length;t++)d.matches[t].isGroup=!1;g.length>0?(c=g[g.length-1],c.matches.push(d)):k.matches.push(d)}}else o(u,k,f)}function s(e){function i(e){return e===t.optionalmarker.start?e=t.optionalmarker.end:e===t.optionalmarker.end?e=t.optionalmarker.start:e===t.groupmarker.start?e=t.groupmarker.end:e===t.groupmarker.end&&(e=t.groupmarker.start),e}e.matches=e.matches.reverse();for(var n in e.matches){var a=parseInt(n);if(e.matches[n].isQuantifier&&e.matches[a+1]&&e.matches[a+1].isGroup){var o=e.matches[n];e.matches.splice(n,1),e.matches.splice(a+1,0,o)}void 0!==e.matches[n].matches?e.matches[n]=s(e.matches[n]):e.matches[n]=i(e.matches[n])}return e}for(var l,u,p,c,d,f,m,v=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,h=!1,k=new i,g=[],b=[];l=v.exec(e);)if(u=l[0],h)r();else switch(u.charAt(0)){case t.escapeChar:h=!0;break;case t.optionalmarker.end:case t.groupmarker.end:if(p=g.pop(),void 0!==p)if(g.length>0){if(c=g[g.length-1],c.matches.push(p),c.isAlternator){d=g.pop();for(var y=0;y<d.matches.length;y++)d.matches[y].isGroup=!1;g.length>0?(c=g[g.length-1],c.matches.push(d)):k.matches.push(d)}}else k.matches.push(p);else r();break;case t.optionalmarker.start:g.push(new i((!1),(!0)));break;case t.groupmarker.start:g.push(new i((!0)));break;case t.quantifiermarker.start:var P=new i((!1),(!1),(!0));u=u.replace(/[{}]/g,"");var _=u.split(","),S=isNaN(_[0])?_[0]:parseInt(_[0]),E=1===_.length?S:isNaN(_[1])?_[1]:parseInt(_[1]);if("*"!==E&&"+"!==E||(S="*"===E?0:1),P.quantifier={min:S,max:E},g.length>0){var I=g[g.length-1].matches;l=I.pop(),l.isGroup||(m=new i((!0)),m.matches.push(l),l=m),I.push(l),I.push(P)}else l=k.matches.pop(),l.isGroup||(m=new i((!0)),m.matches.push(l),l=m),k.matches.push(l),k.matches.push(P);break;case t.alternatormarker:g.length>0?(c=g[g.length-1],f=c.matches.pop()):f=k.matches.pop(),f.isAlternator?g.push(f):(d=new i((!1),(!1),(!1),(!0)),d.matches.push(f),g.push(d));break;default:r()}for(;g.length>0;)p=g.pop(),a(p,!0),k.matches.push(p);return k.matches.length>0&&(f=k.matches[k.matches.length-1],a(f),b.push(k)),t.numericInput&&s(b[0]),b}function n(n,a){if(null!==n&&""!==n){if(1===n.length&&t.greedy===!1&&0!==t.repeat&&(t.placeholder=""),t.repeat>0||"*"===t.repeat||"+"===t.repeat){var o="*"===t.repeat?0:"+"===t.repeat?1:t.repeat;n=t.groupmarker.start+n+t.groupmarker.end+t.quantifiermarker.start+o+","+t.repeat+t.quantifiermarker.end}var r;return void 0===Inputmask.prototype.masksCache[n]||e===!0?(r={mask:n,maskToken:i(n),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},metadata:a},e!==!0&&(Inputmask.prototype.masksCache[t.numericInput?n.split("").reverse().join(""):n]=r)):r=$.extend(!0,{},Inputmask.prototype.masksCache[n]),r}}function a(t){return t=t.toString()}var o;if($.isFunction(t.mask)&&(t.mask=t.mask.call(this,t)),$.isArray(t.mask)){if(t.mask.length>1){t.keepStatic=null===t.keepStatic||t.keepStatic;var r="(";return $.each(t.numericInput?t.mask.reverse():t.mask,function(t,e){r.length>1&&(r+=")|("),r+=a(void 0===e.mask||$.isFunction(e.mask)?e:e.mask)}),r+=")",n(r,t.mask)}t.mask=t.mask.pop()}return t.mask&&(o=void 0===t.mask.mask||$.isFunction(t.mask.mask)?n(a(t.mask),t.mask):n(a(t.mask.mask),t.mask)),o}function maskScope(t,e,i){function n(t,e,i){e=e||0;var n,o,r,s=[],l=0;do{if(t===!0&&a().validPositions[l]){var p=a().validPositions[l];o=p.match,n=p.locator.slice(),s.push(i===!0?p.input:I(l,o))}else r=u(l,n,l-1),o=r.match,n=r.locator.slice(),s.push(I(l,o));l++}while((void 0===at||l-1<at)&&null!==o.fn||null===o.fn&&""!==o.def||e>=l);return s.pop(),s}function a(){return e}function o(t){var e=a();e.buffer=void 0,e.tests={},t!==!0&&(e._buffer=void 0,e.validPositions={},e.p=0)}function r(t,e){var i=a(),n=-1,o=i.validPositions;void 0===t&&(t=-1);var r=n,s=n;for(var l in o){var u=parseInt(l);o[u]&&(e||null!==o[u].match.fn)&&(u<=t&&(r=u),u>=t&&(s=u))}return n=r!==-1&&t-r>1||s<t?r:s}function s(t,e,n){if(i.insertMode&&void 0!==a().validPositions[t]&&void 0===n){var o,s=$.extend(!0,{},a().validPositions),l=r();for(o=t;o<=l;o++)delete a().validPositions[o];a().validPositions[t]=e;var u,p=!0,f=a().validPositions;for(o=u=t;o<=l;o++){var m=s[o];if(void 0!==m)for(var v=u,h=-1;v<y()&&(null==m.match.fn&&f[o]&&(f[o].match.optionalQuantifier===!0||f[o].match.optionality===!0)||null!=m.match.fn);){if(null===m.match.fn||!i.keepStatic&&f[o]&&(void 0!==f[o+1]&&d(o+1,f[o].locator.slice(),o).length>1||void 0!==f[o].alternation)?v++:v=P(u),c(v,m.match.def)){p=g(v,m.input,!0,!0)!==!1,u=v;break}if(p=null==m.match.fn,h===v)break;h=v}if(!p)break}if(!p)return a().validPositions=$.extend(!0,{},s),!1}else a().validPositions[t]=e;return!0}function l(t,e,n,s){var l,u=t;for(a().p=t,l=u;l<e;l++)void 0!==a().validPositions[l]&&(n!==!0&&i.canClearPosition(a(),l,r(),s,i)===!1||delete a().validPositions[l]);for(o(!0),l=u+1;l<=r();){for(;void 0!==a().validPositions[u];)u++;var p=a().validPositions[u];l<u&&(l=u+1);var d=a().validPositions[l];void 0!==d&&b(l)&&void 0===p?(c(u,d.match.def)&&g(u,d.input,!0)!==!1&&(delete a().validPositions[l],l++),u++):l++}var f=r(),m=y();for(s!==!0&&n!==!0&&void 0!==a().validPositions[f]&&a().validPositions[f].input===i.radixPoint&&delete a().validPositions[f],l=f+1;l<=m;l++)a().validPositions[l]&&delete a().validPositions[l];o(!0)}function u(t,e,n){var o=a().validPositions[t];if(void 0===o)for(var s=d(t,e,n),l=r(),u=a().validPositions[l]||d(0)[0],p=void 0!==u.alternation?u.locator[u.alternation].toString().split(","):[],c=0;c<s.length&&(o=s[c],!(o.match&&(i.greedy&&o.match.optionalQuantifier!==!0||(o.match.optionality===!1||o.match.newBlockMarker===!1)&&o.match.optionalQuantifier!==!0)&&(void 0===u.alternation||u.alternation!==o.alternation||void 0!==o.locator[u.alternation]&&k(o.locator[u.alternation].toString().split(","),p))));c++);return o}function p(t){return a().validPositions[t]?a().validPositions[t].match:d(t)[0].match}function c(t,e){for(var i=!1,n=d(t),a=0;a<n.length;a++)if(n[a].match&&n[a].match.def===e){i=!0;break}return i}function d(t,e,i,n){function o(e,i,n,l){function p(n,l,f){if(u>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+a().mask;if(u===t&&void 0===n.matches)return c.push({match:n,locator:l.reverse()}),!0;if(void 0!==n.matches){if(n.isGroup&&f!==n){if(n=p(e.matches[$.inArray(n,e.matches)+1],l))return!0}else if(n.isOptional){var m=n;if(n=o(n,i,l,f)){if(r=c[c.length-1].match,s=0===$.inArray(r,m.matches),!s)return!0;d=!0,u=t}}else if(n.isAlternator){var v,h=n,k=[],g=c.slice(),b=l.length,y=i.length>0?i.shift():-1;if(y===-1||"string"==typeof y){var P=u,_=i.slice(),S=[];"string"==typeof y&&(S=y.split(","));for(var E=0;E<h.matches.length;E++){if(c=[],n=p(h.matches[E],[E].concat(l),f)||n,n!==!0&&void 0!==n&&S[S.length-1]<h.matches.length){var I=e.matches.indexOf(n)+1;e.matches.length>I&&(n=p(e.matches[I],[I].concat(l.slice(1,l.length)),f),n&&(S.push(I.toString()),$.each(c,function(t,e){e.alternation=l.length-1})))}v=c.slice(),u=P,c=[];for(var C=0;C<_.length;C++)i[C]=_[C];for(var O=0;O<v.length;O++){var x=v[O];x.alternation=x.alternation||b;for(var A=0;A<k.length;A++){var w=k[A];if(x.match.mask===w.match.mask&&("string"!=typeof y||$.inArray(x.locator[x.alternation].toString(),S)!==-1)){v.splice(O,1),O--,w.locator[x.alternation]=w.locator[x.alternation]+","+x.locator[x.alternation],w.alternation=x.alternation;break}}}k=k.concat(v)}"string"==typeof y&&(k=$.map(k,function(t,e){if(isFinite(e)){var i,n=t.alternation,a=t.locator[n].toString().split(",");t.locator[n]=void 0,t.alternation=void 0;for(var o=0;o<a.length;o++)i=$.inArray(a[o],S)!==-1,i&&(void 0!==t.locator[n]?(t.locator[n]+=",",t.locator[n]+=a[o]):t.locator[n]=parseInt(a[o]),t.alternation=n);if(void 0!==t.locator[n])return t}})),c=g.concat(k),u=t,d=c.length>0}else n=!!h.matches[y]&&p(h.matches[y],[y].concat(l),f);if(n)return!0}else if(n.isQuantifier&&f!==e.matches[$.inArray(n,e.matches)-1])for(var M=n,T=i.length>0?i.shift():0;T<(isNaN(M.quantifier.max)?T+1:M.quantifier.max)&&u<=t;T++){var D=e.matches[$.inArray(M,e.matches)-1];if(n=p(D,[T].concat(l),D)){if(r=c[c.length-1].match,r.optionalQuantifier=T>M.quantifier.min-1,s=0===$.inArray(r,D.matches)){if(T>M.quantifier.min-1){d=!0,u=t;break}return!0}return!0}}else if(n=o(n,i,l,f))return!0}else u++}for(var f=i.length>0?i.shift():0;f<e.matches.length;f++)if(e.matches[f].isQuantifier!==!0){var m=p(e.matches[f],[f].concat(n),l);if(m&&u===t)return m;if(u>t)break}}var r,s,l=a().maskToken,u=e?i:0,p=e||[0],c=[],d=!1;if(n===!0&&a().tests[t])return a().tests[t];if(void 0===e){for(var f,m=t-1;void 0===(f=a().validPositions[m])&&m>-1&&(!a().tests[m]||void 0===(f=a().tests[m][0]));)m--;void 0!==f&&m>-1&&(u=m,p=f.locator.slice())}for(var v=p.shift();v<l.length;v++){var h=o(l[v],p,[v]);if(h&&u===t||u>t)break}return(0===c.length||d)&&c.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:""},locator:[]}),a().tests[t]=$.extend(!0,[],c),a().tests[t]}function f(){return void 0===a()._buffer&&(a()._buffer=n(!1,1)),a()._buffer}function m(){return void 0===a().buffer&&(a().buffer=n(!0,r(),!0)),a().buffer}function v(t,e,n){var r;if(n=n||m().slice(),t===!0)o(),t=0,e=n.length;else for(r=t;r<e;r++)delete a().validPositions[r],delete a().tests[r];for(r=t;r<e;r++)o(!0),n[r]!==i.skipOptionalPartCharacter&&g(r,n[r],!0,!0)}function h(t,e){switch(e.casing){case"upper":t=t.toUpperCase();break;case"lower":t=t.toLowerCase()}return t}function k(t,e){for(var n=i.greedy?e:e.slice(0,1),a=!1,o=0;o<t.length;o++)if($.inArray(t[o],n)!==-1){a=!0;break}return a}function g(t,e,n,p){function c(t,e,n,u){var p=!1;return $.each(d(t),function(c,d){for(var f=d.match,k=e?1:0,b="",y=f.cardinality;y>k;y--)b+=S(t-(y-1));if(e&&(b+=e),p=null!=f.fn?f.fn.test(b,a(),t,n,i):(e===f.def||e===i.skipOptionalPartCharacter)&&""!==f.def&&{c:f.def,pos:t},p!==!1){var P=void 0!==p.c?p.c:e;P=P===i.skipOptionalPartCharacter&&null===f.fn?f.def:P;var _=t,E=m();if(void 0!==p.remove&&($.isArray(p.remove)||(p.remove=[p.remove]),$.each(p.remove.sort(function(t,e){return e-t}),function(t,e){l(e,e+1,!0)})),void 0!==p.insert&&($.isArray(p.insert)||(p.insert=[p.insert]),$.each(p.insert.sort(function(t,e){return t-e}),function(t,e){g(e.pos,e.c,!0)})),p.refreshFromBuffer){var I=p.refreshFromBuffer;if(n=!0,v(I===!0?I:I.start,I.end,E),void 0===p.pos&&void 0===p.c)return p.pos=r(),!1;if(_=void 0!==p.pos?p.pos:t,_!==t)return p=$.extend(p,g(_,P,!0)),!1}else if(p!==!0&&void 0!==p.pos&&p.pos!==t&&(_=p.pos,v(t,_),_!==t))return p=$.extend(p,g(_,P,!0)),!1;return(p===!0||void 0!==p.pos||void 0!==p.c)&&(c>0&&o(!0),s(_,$.extend({},d,{input:h(P,f)}),u)||(p=!1),!1)}}),p}function f(t,e,n,s){for(var l,p,c,d,f,m,v=$.extend(!0,{},a().validPositions),h=r();h>=0&&(d=a().validPositions[h],!d||void 0===d.alternation||(l=h,p=a().validPositions[l].alternation,u(l).locator[d.alternation]===d.locator[d.alternation]));h--);if(void 0!==p){l=parseInt(l);for(var k in a().validPositions)if(k=parseInt(k),d=a().validPositions[k],k>=l&&void 0!==d.alternation){var b=a().validPositions[l].locator[p].toString().split(","),y=d.locator[p]||b[0];y.length>0&&(y=y.split(",")[0]);for(var P=0;P<b.length;P++)if(y<b[P]){for(var _,S,E=k;E>=0;E--)if(_=a().validPositions[E],void 0!==_){S=_.locator[p],_.locator[p]=parseInt(b[P]);break}if(y!==_.locator[p]){var I=[],C=0;for(f=k+1;f<r()+1;f++)m=a().validPositions[f],m&&(null!=m.match.fn?I.push(m.input):f<t&&C++),delete a().validPositions[f],delete a().tests[f];for(o(!0),i.keepStatic=!i.keepStatic,c=!0;I.length>0;){var O=I.shift();if(O!==i.skipOptionalPartCharacter&&!(c=g(r()+1,O,!1,!0)))break}if(_.alternation=p,_.locator[p]=S,c){var x=r(t)+1,A=0;for(f=k+1;f<r()+1;f++)m=a().validPositions[f],m&&null==m.match.fn&&f<t&&A++;t+=A-C,c=g(t>x?x:t,e,n,s)}if(i.keepStatic=!i.keepStatic,c)return c;o(),a().validPositions=$.extend(!0,{},v)}}break}}return!1}function _(t,e){for(var i=a().validPositions[e],n=i.locator,o=n.length,r=t;r<e;r++)if(!b(r)){var l=d(r),u=l[0],p=-1;$.each(l,function(t,e){for(var i=0;i<o;i++)e.locator[i]&&k(e.locator[i].toString().split(","),n[i].toString().split(","))&&p<i&&(p=i,u=e)}),s(r,$.extend({},u,{input:u.match.def}),!0)}}n=n===!0;for(var E=m(),C=t-1;C>-1&&!a().validPositions[C];C--);for(C++;C<t;C++)void 0===a().validPositions[C]&&((!b(C)||E[C]!==I(C))&&d(C).length>1||E[C]===i.radixPoint||"0"===E[C]&&$.inArray(i.radixPoint,E)<C)&&c(C,E[C],!0);var O=t,x=!1,A=$.extend(!0,{},a().validPositions);if(O<y()&&(m(),x=c(O,e,n,p),(!n||p)&&x===!1)){var w=a().validPositions[O];if(!w||null!==w.match.fn||w.match.def!==e&&e!==i.skipOptionalPartCharacter){if((i.insertMode||void 0===a().validPositions[P(O)])&&!b(O))for(var T=O+1,D=P(O);T<=D;T++)if(x=c(T,e,n,p),x!==!1){_(O,T),O=T;break}}else x={caret:P(O)}}if(x===!1&&i.keepStatic&&M(E)&&(x=f(t,e,n,p)),x===!0&&(x={pos:O}),$.isFunction(i.postValidation)&&x!==!1&&!n){o(!0);var j=i.postValidation(m(),i);if(j){if(j.refreshFromBuffer){var G=j.refreshFromBuffer;v(G===!0?G:G.start,G.end,j.buffer),o(!0),x=j}}else o(!0),a().validPositions=$.extend(!0,{},A),x=!1}return x}function b(t){var e=p(t);if(null!=e.fn)return e.fn;if(!i.keepStatic&&void 0===a().validPositions[t]){for(var n=d(t),o=!0,r=0;r<n.length;r++)if(""!==n[r].match.def&&(void 0===n[r].alternation||n[r].locator[n[r].alternation].length>1)){o=!1;break}return o}return!1}function y(){var t;at=nt.prop("maxLength"),at===-1&&(at=void 0);var e,i=r(),n=a().validPositions[i],o=void 0!==n?n.locator.slice():void 0;for(e=i+1;void 0===n||null!==n.match.fn||null===n.match.fn&&""!==n.match.def;e++)n=u(e,o,e-1),o=n.locator.slice();var s=p(e-1);return t=""!==s.def?e:e-1,void 0===at||t<at?t:at}function P(t,e){var n=y();if(t>=n)return n;for(var a=t;++a<n&&(e===!0&&(p(a).newBlockMarker!==!0||!b(a))||e!==!0&&!b(a)&&(i.nojumps!==!0||i.nojumpsThreshold>a)););return a}function _(t,e){var i=t;if(i<=0)return 0;for(;--i>0&&(e===!0&&p(i).newBlockMarker!==!0||e!==!0&&!b(i)););return i}function S(t){return void 0===a().validPositions[t]?I(t):a().validPositions[t].input}function E(t,e,n,a,r){if(a&&$.isFunction(i.onBeforeWrite)){var s=i.onBeforeWrite.call(t,a,e,n,i);if(s){if(s.refreshFromBuffer){var l=s.refreshFromBuffer;v(l===!0?l:l.start,l.end,s.buffer||e),o(!0),e=m()}n=void 0!==s.caret?s.caret:n}}t.inputmask._valueSet(e.join("")),void 0===n||void 0!==a&&"blur"===a.type||x(t,n),r===!0&&(lt=!0,$(t).trigger("input"))}function I(t,e){if(e=e||p(t),void 0!==e.placeholder)return e.placeholder;if(null===e.fn){if(!i.keepStatic&&void 0===a().validPositions[t]){for(var n,o=d(t),r=!1,s=0;s<o.length;s++){if(n&&""!==o[s].match.def&&o[s].match.def!==n.match.def&&(void 0===o[s].alternation||o[s].alternation===n.alternation)){r=!0;break}o[s].match.optionality!==!0&&o[s].match.optionalQuantifier!==!0&&(n=o[s])}if(r)return i.placeholder.charAt(t%i.placeholder.length)}return e.def}return i.placeholder.charAt(t%i.placeholder.length)}function C(t,e,n,s){function l(){var t=!1,e=f().slice(d,P(d)).join("").indexOf(c);if(e!==-1&&!b(d)){t=!0;for(var i=f().slice(d,d+e),n=0;n<i.length;n++)if(" "!==i[n]){t=!1;break}}return t}var p=void 0!==s?s.slice():t.inputmask._valueGet().split(""),c="",d=0;if(o(),a().p=P(-1),e&&t.inputmask._valueSet(""),!n)if(i.autoUnmask!==!0){var v=f().slice(0,P(-1)).join(""),h=p.join("").match(new RegExp("^"+Inputmask.escapeRegex(v),"g"));h&&h.length>0&&(p.splice(0,h.length*v.length),d=P(d))}else d=P(d);$.each(p,function(e,o){var s=$.Event("keypress");s.which=o.charCodeAt(0),c+=o;var p=r(void 0,!0),f=a().validPositions[p],m=u(p+1,f?f.locator.slice():void 0,p);if(!l()||n||i.autoUnmask){var v=n?e:null==m.match.fn&&m.match.optionality&&p+1<a().p?p+1:a().p;F.call(t,s,!0,!1,n,v),d=v+1,c=""}else F.call(t,s,!0,!1,!0,p+1)}),e&&E(t,m(),document.activeElement===t?P(r(0)):void 0,$.Event("checkval"))}function O(t){if(t[0].inputmask&&!t.hasClass("hasDatepicker")){var e=[],n=a().validPositions;for(var o in n)n[o].match&&null!=n[o].match.fn&&e.push(n[o].input);var r=0===e.length?null:(rt?e.reverse():e).join("");if(null!==r){var s=(rt?m().slice().reverse():m()).join("");$.isFunction(i.onUnMask)&&(r=i.onUnMask.call(t,s,r,i)||r)}return r}return t[0].inputmask._valueGet()}function x(t,e,n){function a(t){if(rt&&"number"==typeof t&&(!i.greedy||""!==i.placeholder)){var e=m().join("").length;t=e-t}return t}var o;if("number"!=typeof e)return t.setSelectionRange?(e=t.selectionStart,n=t.selectionEnd):window.getSelection?(o=window.getSelection().getRangeAt(0),o.commonAncestorContainer.parentNode!==t&&o.commonAncestorContainer!==t||(e=o.startOffset,n=o.endOffset)):document.selection&&document.selection.createRange&&(o=document.selection.createRange(),e=0-o.duplicate().moveStart("character",-1e5),n=e+o.text.length),{begin:a(e),end:a(n)};if(e=a(e),n=a(n),n="number"==typeof n?n:e,$(t).is(":visible")){var r=t.style.fontSize.replace("px","")*n;if(t.scrollLeft=r>t.scrollWidth?r:0,androidchrome||i.insertMode!==!1||e!==n||n++,t.setSelectionRange)t.selectionStart=e,t.selectionEnd=n;else if(window.getSelection){if(o=document.createRange(),void 0===t.firstChild){var s=document.createTextNode("");t.appendChild(s)}o.setStart(t.firstChild,e<t.inputmask._valueGet().length?e:t.inputmask._valueGet().length),o.setEnd(t.firstChild,n<t.inputmask._valueGet().length?n:t.inputmask._valueGet().length),o.collapse(!0);var l=window.getSelection();l.removeAllRanges(),l.addRange(o)}else t.createTextRange&&(o=t.createTextRange(),o.collapse(!0),o.moveEnd("character",n),o.moveStart("character",e),o.select())}}function A(t){var e,i,n=m(),o=n.length,s=r(),l={},p=a().validPositions[s],c=void 0!==p?p.locator.slice():void 0;for(e=s+1;e<n.length;e++)i=u(e,c,e-1),c=i.locator.slice(),l[e]=$.extend(!0,{},i);var f=p&&void 0!==p.alternation?p.locator[p.alternation]:void 0;for(e=o-1;e>s&&(i=l[e],(i.match.optionality||i.match.optionalQuantifier||f&&(f!==l[e].locator[p.alternation]&&null!=i.match.fn||null===i.match.fn&&i.locator[p.alternation]&&k(i.locator[p.alternation].toString().split(","),f.toString().split(","))&&""!==d(e)[0].def))&&n[e]===I(e,i.match));e--)o--;return t?{l:o,def:l[o]?l[o].match:void 0}:o}function w(t){for(var e=A(),i=t.length-1;i>e&&!b(i);i--);return t.splice(e,i+1-e),t}function M(t){if($.isFunction(i.isComplete))return i.isComplete.call(nt,t,i);if("*"!==i.repeat){var e=!1,n=A(!0),o=_(n.l);if(void 0===n.def||n.def.newBlockMarker||n.def.optionality||n.def.optionalQuantifier){e=!0;for(var r=0;r<=o;r++){var s=u(r).match;if(null!==s.fn&&void 0===a().validPositions[r]&&s.optionality!==!0&&s.optionalQuantifier!==!0||null===s.fn&&t[r]!==I(r,s)){e=!1;break}}}return e}}function T(t,e){return rt?t-e>1||t-e===1&&i.insertMode:e-t>1||e-t===1&&i.insertMode}function D(t){var e=$._data(t).events,n=!1;$.each(e,function(t,e){$.each(e,function(t,e){if("inputmask"===e.namespace){var a=e.handler;e.handler=function(t){if(void 0===this.inputmask){var e=$.data(this,"_inputmask_opts");e?new Inputmask(e).mask(this):$(this).unbind(".inputmask")}else{if("setvalue"===t.type||!(this.disabled||this.readOnly&&!("keydown"===t.type&&t.ctrlKey&&67===t.keyCode||i.tabThrough===!1&&t.keyCode===Inputmask.keyCode.TAB))){switch(t.type){case"input":if(lt===!0||n===!0)return lt=!1,t.preventDefault();break;case"keydown":st=!1,n=!1;break;case"keypress":if(st===!0)return t.preventDefault();st=!0;break;case"compositionstart":n=!0;break;case"compositionupdate":lt=!0;break;case"compositionend":n=!1}return a.apply(this,arguments)}t.preventDefault()}}}})})}function j(t){function e(t){if($.valHooks&&void 0===$.valHooks[t]||$.valHooks[t].inputmaskpatch!==!0){var e=$.valHooks[t]&&$.valHooks[t].get?$.valHooks[t].get:function(t){return t.value},i=$.valHooks[t]&&$.valHooks[t].set?$.valHooks[t].set:function(t,e){return t.value=e,t};$.valHooks[t]={get:function(t){if(t.inputmask){if(t.inputmask.opts.autoUnmask)return t.inputmask.unmaskedvalue();var i=e(t),n=t.inputmask.maskset,a=n._buffer;return a=a?a.join(""):"",i!==a?i:""}return e(t)},set:function(t,e){var n,a=$(t);return n=i(t,e),t.inputmask&&a.triggerHandler("setvalue.inputmask"),n},inputmaskpatch:!0}}}function i(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():o.call(this)!==f().join("")?o.call(this):"":o.call(this)}function n(t){r.call(this,t),this.inputmask&&$(this).triggerHandler("setvalue.inputmask")}function a(t){$(t).bind("mouseenter.inputmask",function(t){var e=$(this),i=this,n=i.inputmask._valueGet();""!==n&&n!==m().join("")&&e.triggerHandler("setvalue.inputmask")});var e=$._data(t).events,i=e.mouseover;if(i){for(var n=i[i.length-1],a=i.length-1;a>0;a--)i[a]=i[a-1];i[0]=n}}var o,r;t.inputmask.__valueGet||(Object.getOwnPropertyDescriptor&&void 0===t.value?(o=function(){return this.textContent},r=function(t){this.textContent=t},Object.defineProperty(t,"value",{get:i,set:n})):document.__lookupGetter__&&t.__lookupGetter__("value")?(o=t.__lookupGetter__("value"),r=t.__lookupSetter__("value"),t.__defineGetter__("value",i),t.__defineSetter__("value",n)):(o=function(){return t.value},r=function(e){t.value=e},e(t.type),a(t)),t.inputmask.__valueGet=o,t.inputmask._valueGet=function(t){return rt&&t!==!0?o.call(this.el).split("").reverse().join(""):o.call(this.el)},t.inputmask.__valueSet=r,t.inputmask._valueSet=function(t,e){r.call(this.el,e!==!0&&rt?t.split("").reverse().join(""):t)})}function G(t,e,n,s){function p(){if(i.keepStatic){o(!0);var e,n=[],s=$.extend(!0,{},a().validPositions);for(e=r();e>=0;e--){var l=a().validPositions[e];if(l&&(null!=l.match.fn&&n.push(l.input),delete a().validPositions[e],void 0!==l.alternation&&l.locator[l.alternation]===u(e).locator[l.alternation]))break}if(e>-1)for(;n.length>0;){a().p=P(r());var p=$.Event("keypress");p.which=n.pop().charCodeAt(0),F.call(t,p,!0,!1,!1,a().p)}else a().validPositions=$.extend(!0,{},s)}}if((i.numericInput||rt)&&(e===Inputmask.keyCode.BACKSPACE?e=Inputmask.keyCode.DELETE:e===Inputmask.keyCode.DELETE&&(e=Inputmask.keyCode.BACKSPACE),rt)){var c=n.end;n.end=n.begin,n.begin=c}e===Inputmask.keyCode.BACKSPACE&&(n.end-n.begin<1||i.insertMode===!1)?(n.begin=_(n.begin),void 0===a().validPositions[n.begin]||a().validPositions[n.begin].input!==i.groupSeparator&&a().validPositions[n.begin].input!==i.radixPoint||n.begin--):e===Inputmask.keyCode.DELETE&&n.begin===n.end&&(n.end=b(n.end)?n.end+1:P(n.end)+1,void 0===a().validPositions[n.begin]||a().validPositions[n.begin].input!==i.groupSeparator&&a().validPositions[n.begin].input!==i.radixPoint||n.end++),l(n.begin,n.end,!1,s),s!==!0&&p();var d=r(n.begin);d<n.begin?(d===-1&&o(),a().p=P(d)):s!==!0&&(a().p=n.begin)}function B(t){var e=this,n=$(e),o=t.keyCode,s=x(e);o===Inputmask.keyCode.BACKSPACE||o===Inputmask.keyCode.DELETE||iphone&&127===o||t.ctrlKey&&88===o&&!isInputEventSupported("cut")?(t.preventDefault(),88===o&&(X=m().join("")),G(e,o,s),E(e,m(),a().p,t,X!==m().join("")),e.inputmask._valueGet()===f().join("")?n.trigger("cleared"):M(m())===!0&&n.trigger("complete"),i.showTooltip&&n.prop("title",a().mask)):o===Inputmask.keyCode.END||o===Inputmask.keyCode.PAGE_DOWN?setTimeout(function(){var n=P(r());i.insertMode||n!==y()||t.shiftKey||n--,x(e,t.shiftKey?s.begin:n,n)},0):o===Inputmask.keyCode.HOME&&!t.shiftKey||o===Inputmask.keyCode.PAGE_UP?x(e,0,t.shiftKey?s.begin:0):(i.undoOnEscape&&o===Inputmask.keyCode.ESCAPE||90===o&&t.ctrlKey)&&t.altKey!==!0?(C(e,!0,!1,X.split("")),n.click()):o!==Inputmask.keyCode.INSERT||t.shiftKey||t.ctrlKey?i.tabThrough===!0&&o===Inputmask.keyCode.TAB?(t.shiftKey===!0?(null===p(s.begin).fn&&(s.begin=P(s.begin)),s.end=_(s.begin,!0),s.begin=_(s.end,!0)):(s.begin=P(s.begin,!0),s.end=P(s.begin,!0),s.end<y()&&s.end--),s.begin<y()&&(t.preventDefault(),x(e,s.begin,s.end))):i.insertMode!==!1||t.shiftKey||(o===Inputmask.keyCode.RIGHT?setTimeout(function(){var t=x(e);x(e,t.begin)},0):o===Inputmask.keyCode.LEFT&&setTimeout(function(){var t=x(e);x(e,rt?t.begin+1:t.begin-1)},0)):(i.insertMode=!i.insertMode,x(e,i.insertMode||s.begin!==y()?s.begin:s.begin-1)),i.onKeyDown.call(this,t,m(),x(e).begin,i),ut=$.inArray(o,i.ignorables)!==-1}function F(t,e,n,r,l){var u=this,p=$(u),c=t.which||t.charCode||t.keyCode;if(!(e===!0||t.ctrlKey&&t.altKey)&&(t.ctrlKey||t.metaKey||ut))return c===Inputmask.keyCode.ENTER&&X!==m().join("")&&setTimeout(function(){p.change(),X=m().join("")},0),!0;if(c){46===c&&t.shiftKey===!1&&","===i.radixPoint&&(c=44);var f,h=e?{begin:l,end:l}:x(u),k=String.fromCharCode(c),b=T(h.begin,h.end);b&&(a().undoPositions=$.extend(!0,{},a().validPositions),G(u,Inputmask.keyCode.DELETE,h,!0),h.begin=a().p,i.insertMode||(i.insertMode=!i.insertMode,s(h.begin,r),i.insertMode=!i.insertMode),b=!i.multi),a().writeOutBuffer=!0;var y=rt&&!b?h.end:h.begin,S=g(y,k,r);if(S!==!1){if(S!==!0&&(y=void 0!==S.pos?S.pos:y,k=void 0!==S.c?S.c:k),o(!0),void 0!==S.caret)f=S.caret;else{var I=a().validPositions;f=!i.keepStatic&&(void 0!==I[y+1]&&d(y+1,I[y].locator.slice(),y).length>1||void 0!==I[y].alternation)?y+1:P(y)}a().p=f}if(n!==!1){var C=this;if(setTimeout(function(){i.onKeyValidation.call(C,S,i)},0),a().writeOutBuffer&&S!==!1){var O=m();E(u,O,e?void 0:i.numericInput?_(f):f,t,e!==!0),e!==!0&&setTimeout(function(){M(O)===!0&&p.trigger("complete")},0)}else b&&(a().buffer=void 0,a().validPositions=a().undoPositions)}else b&&(a().buffer=void 0,a().validPositions=a().undoPositions);if(i.showTooltip&&p.prop("title",a().mask),e&&$.isFunction(i.onBeforeWrite)){var A=i.onBeforeWrite.call(this,t,m(),f,i);if(A&&A.refreshFromBuffer){var w=A.refreshFromBuffer;v(w===!0?w:w.start,w.end,A.buffer),o(!0),A.caret&&(a().p=A.caret)}}if(t.preventDefault(),e)return S}}function R(t){var e=this,n=$(e),a=e.inputmask._valueGet(!0),o=x(e);if("propertychange"===t.type&&e.inputmask._valueGet().length<=y())return!0;if("paste"===t.type){var r=a.substr(0,o.begin),s=a.substr(o.end,a.length);r===f().slice(0,o.begin).join("")&&(r=""),s===f().slice(o.end).join("")&&(s=""),window.clipboardData&&window.clipboardData.getData?a=r+window.clipboardData.getData("Text")+s:t.originalEvent&&t.originalEvent.clipboardData&&t.originalEvent.clipboardData.getData&&(a=r+t.originalEvent.clipboardData.getData("text/plain")+s)}var l=a;if($.isFunction(i.onBeforePaste)){if(l=i.onBeforePaste.call(e,a,i),l===!1)return t.preventDefault(),!1;l||(l=a)}return C(e,!1,!1,rt?l.split("").reverse():l.toString().split("")),E(e,m(),void 0,t,!0),n.click(),M(m())===!0&&n.trigger("complete"),!1}function L(t){var e=this;C(e,!0,!1),M(m())===!0&&$(e).trigger("complete"),t.preventDefault()}function N(t){var e=this;X=m().join(""),""!==et&&0===t.originalEvent.data.indexOf(et)||(tt=x(e))}function K(t){var e=this,n=x(e);0===t.originalEvent.data.indexOf(et)&&(o(),n=tt);var r=t.originalEvent.data;x(e,n.begin,n.end);for(var s=0;s<r.length;s++){var l=$.Event("keypress");l.which=r.charCodeAt(s),st=!1,ut=!1,F.call(e,l)}setTimeout(function(){var t=a().p;E(e,m(),i.numericInput?_(t):t)},0),et=t.originalEvent.data}function H(t){}function U(t){var e=this,n=e.inputmask._valueGet();e.inputmask._valueSet($.isFunction(i.onBeforeMask)?i.onBeforeMask.call(e,n,i)||n:n),C(e,!0,!1),X=m().join(""),(i.clearMaskOnLostFocus||i.clearIncomplete)&&e.inputmask._valueGet()===f().join("")&&e.inputmask._valueSet("")}function W(t){var e=this,n=e.inputmask._valueGet();i.showMaskOnFocus&&(!i.showMaskOnHover||i.showMaskOnHover&&""===n)?e.inputmask._valueGet()!==m().join("")&&E(e,m(),P(r())):pt===!1&&x(e,P(r())),i.positionCaretOnTab===!0&&setTimeout(function(){x(e,P(r()))},0),X=m().join("")}function Q(t){var e=$(this),n=this;if(pt=!1,i.clearMaskOnLostFocus){var a=m().slice(),o=n.inputmask._valueGet();document.activeElement!==n&&o!==e.attr("placeholder")&&""!==o&&(r()===-1&&o===f().join("")?a=[]:w(a),E(n,a))}}function q(t){function e(t){if(i.radixFocus&&""!==i.radixPoint){var e=a().validPositions;if(void 0===e[t]||e[t].input===I(t)){if(t<P(-1))return!0;var n=$.inArray(i.radixPoint,m());if(n!==-1){for(var o in e)if(n<o&&e[o].input!==I(o))return!1;return!0}}}return!1}var n=this;if(document.activeElement===n){var o=x(n);if(o.begin===o.end)if(e(o.begin))x(n,$.inArray(i.radixPoint,m()));else{var s=o.begin,l=P(r(s));s<l?x(n,b(s)||b(s-1)?s:P(s)):x(n,i.numericInput?0:l)}}}function V(t){var e=this;setTimeout(function(){x(e,0,P(r()))},0)}function z(t){lt=!0;var e=this,n=$(e),o=x(e);if(rt){var r=window.clipboardData||t.originalEvent.clipboardData,s=r.getData("text").split("").reverse().join("");r.setData("text",s)}G(e,Inputmask.keyCode.DELETE,o),E(e,m(),a().p,t,X!==m().join("")),e.inputmask._valueGet()===f().join("")&&n.trigger("cleared"),i.showTooltip&&(e.title=a().mask);
}function Z(t){var e=$(this),n=this;if(n.inputmask){var a=n.inputmask._valueGet(),s=m().slice();X!==s.join("")&&setTimeout(function(){e.change(),X=s.join("")},0),""!==a&&(i.clearMaskOnLostFocus&&(r()===-1&&a===f().join("")?s=[]:w(s)),M(s)===!1&&(setTimeout(function(){e.trigger("incomplete")},0),i.clearIncomplete&&(o(),s=i.clearMaskOnLostFocus?[]:f().slice())),E(n,s,void 0,t))}}function J(t){var e=this;pt=!0,document.activeElement!==e&&i.showMaskOnHover&&e.inputmask._valueGet()!==m().join("")&&E(e,m())}function Y(t){nt=$(t),i.showTooltip&&nt.prop("title",a().mask),("rtl"===t.dir||i.rightAlign)&&(t.style.textAlign="right"),("rtl"===t.dir||i.numericInput)&&(t.dir="ltr",t.removeAttribute("dir"),t.inputmask.isRTL=!0,rt=!0),nt.unbind(".inputmask"),("INPUT"===t.tagName&&isInputTypeSupported(t.getAttribute("type"))||t.isContentEditable)&&(nt.closest("form").bind("submit",function(){X!==m().join("")&&nt.change(),i.clearMaskOnLostFocus&&r()===-1&&t.inputmask._valueGet&&t.inputmask._valueGet()===f().join("")&&t.inputmask._valueSet(""),i.removeMaskOnSubmit&&(t.inputmask._valueSet(t.inputmask.unmaskedvalue(),!0),setTimeout(function(){E(t,m())},0))}).bind("reset",function(){setTimeout(function(){nt.triggerHandler("setvalue.inputmask")},0)}),nt.bind("mouseenter.inputmask",J).bind("blur.inputmask",Z).bind("focus.inputmask",W).bind("mouseleave.inputmask",Q).bind("click.inputmask",q).bind("dblclick.inputmask",V).bind(PasteEventType+".inputmask dragdrop.inputmask drop.inputmask",R).bind("cut.inputmask",z).bind("complete.inputmask",i.oncomplete).bind("incomplete.inputmask",i.onincomplete).bind("cleared.inputmask",i.oncleared).bind("keydown.inputmask",B).bind("keypress.inputmask",F),androidfirefox||nt.bind("compositionstart.inputmask",N).bind("compositionupdate.inputmask",K).bind("compositionend.inputmask",H),"paste"===PasteEventType&&nt.bind("input.inputmask",L)),nt.bind("setvalue.inputmask",U),j(t);var e=$.isFunction(i.onBeforeMask)?i.onBeforeMask.call(t,t.inputmask._valueGet(),i)||t.inputmask._valueGet():t.inputmask._valueGet();C(t,!0,!1,e.split(""));var n=m().slice();X=n.join("");var s;try{s=document.activeElement}catch(l){}M(n)===!1&&i.clearIncomplete&&o(),i.clearMaskOnLostFocus&&(n.join("")===f().join("")?n=[]:w(n)),E(t,n),s===t&&x(t,P(r())),D(t)}var X,tt,et,it,nt,at,ot,rt=!1,st=!1,lt=!1,ut=!1,pt=!0;if(void 0!==t)switch(t.action){case"isComplete":return it=t.el,nt=$(it),e=it.inputmask.maskset,i=it.inputmask.opts,M(t.buffer);case"unmaskedvalue":return it=t.el,void 0===it?(nt=$({}),it=nt[0],it.inputmask=new Inputmask,it.inputmask.opts=i,it.inputmask.el=it,it.inputmask.maskset=e,it.inputmask.isRTL=i.numericInput,i.numericInput&&(rt=!0),ot=($.isFunction(i.onBeforeMask)?i.onBeforeMask.call(nt,t.value,i)||t.value:t.value).split(""),C(nt,!1,!1,rt?ot.reverse():ot),$.isFunction(i.onBeforeWrite)&&i.onBeforeWrite.call(this,void 0,m(),0,i)):nt=$(it),e=it.inputmask.maskset,i=it.inputmask.opts,rt=it.inputmask.isRTL,O(nt);case"mask":X=m().join(""),Y(t.el);break;case"format":return nt=$({}),nt[0].inputmask=new Inputmask,nt[0].inputmask.opts=i,nt[0].inputmask.el=nt[0],nt[0].inputmask.maskset=e,nt[0].inputmask.isRTL=i.numericInput,i.numericInput&&(rt=!0),ot=($.isFunction(i.onBeforeMask)?i.onBeforeMask.call(nt,t.value,i)||t.value:t.value).split(""),C(nt,!1,!1,rt?ot.reverse():ot),$.isFunction(i.onBeforeWrite)&&i.onBeforeWrite.call(this,void 0,m(),0,i),t.metadata?{value:rt?m().slice().reverse().join(""):m().join(""),metadata:nt.inputmask("getmetadata")}:rt?m().slice().reverse().join(""):m().join("");case"isValid":nt=$({}),nt[0].inputmask=new Inputmask,nt[0].inputmask.opts=i,nt[0].inputmask.el=nt[0],nt[0].inputmask.maskset=e,nt[0].inputmask.isRTL=i.numericInput,i.numericInput&&(rt=!0),ot=t.value.split(""),C(nt,!1,!0,rt?ot.reverse():ot);for(var ct=m(),dt=A(),ft=ct.length-1;ft>dt&&!b(ft);ft--);return ct.splice(dt,ft+1-dt),M(ct)&&t.value===ct.join("");case"getemptymask":return it=t.el,nt=$(it),e=it.inputmask.maskset,i=it.inputmask.opts,f();case"remove":it=t.el,nt=$(it),e=it.inputmask.maskset,i=it.inputmask.opts,it.inputmask._valueSet(O(nt)),nt.unbind(".inputmask");var mt;Object.getOwnPropertyDescriptor&&(mt=Object.getOwnPropertyDescriptor(it,"value")),mt&&mt.get?it.inputmask.__valueGet&&Object.defineProperty(it,"value",{get:it.inputmask.__valueGet,set:it.inputmask.__valueSet}):document.__lookupGetter__&&it.__lookupGetter__("value")&&it.inputmask.__valueGet&&(it.__defineGetter__("value",it.inputmask.__valueGet),it.__defineSetter__("value",it.inputmask.__valueSet)),it.inputmask=void 0;break;case"getmetadata":if(it=t.el,nt=$(it),e=it.inputmask.maskset,i=it.inputmask.opts,$.isArray(e.metadata)){for(var vt,ht=r(),kt=ht;kt>=0;kt--)if(a().validPositions[kt]&&void 0!==a().validPositions[kt].alternation){vt=a().validPositions[kt].alternation;break}return void 0!==vt?e.metadata[a().validPositions[ht].locator[vt]]:e.metadata[0]}return e.metadata}}Inputmask.prototype={defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,oncomplete:$.noop,onincomplete:$.noop,oncleared:$.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,aliases:{},alias:null,onKeyDown:$.noop,onBeforeMask:null,onBeforePaste:null,onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!1,onKeyValidation:$.noop,skipOptionalPartCharacter:" ",showTooltip:!1,numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",groupSeparator:"",radixFocus:!1,nojumps:!1,nojumpsThreshold:0,keepStatic:null,positionCaretOnTab:!1,tabThrough:!1,supportsInputType:[],definitions:{9:{validator:"[0-9]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1}},ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123],isComplete:null,canClearPosition:$.noop,postValidation:null},masksCache:{},mask:function(t){var e=$.extend(!0,{},this.opts);importAttributeOptions(t,e,$.extend(!0,{},this.userOptions));var i=generateMaskSet(e,this.noMasksCache);return void 0!==i&&(t.inputmask=t.inputmask||new Inputmask,t.inputmask.opts=e,t.inputmask.noMasksCache=this.noMasksCache,t.inputmask.userOptions=$.extend(!0,{},this.userOptions),t.inputmask.el=t,t.inputmask.maskset=i,t.inputmask.isRTL=!1,$.data(t,"_inputmask_opts",e),maskScope({action:"mask",el:t},i,t.inputmask.opts)),t},option:function(t){return"string"==typeof t?this.opts[t]:"object"==typeof t?($.extend(this.opts,t),$.extend(this.userOptions,t),this):void 0},unmaskedvalue:function(){if(this.el)return maskScope({action:"unmaskedvalue",el:this.el})},remove:function(){if(this.el)return maskScope({action:"remove",el:this.el}),this.el.inputmask=void 0,this.el},getemptymask:function(){if(this.el)return maskScope({action:"getemptymask",el:this.el})},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){if(this.el)return maskScope({action:"isComplete",buffer:this.el.inputmask._valueGet().split(""),el:this.el})},getmetadata:function(){if(this.el)return maskScope({action:"getmetadata",el:this.el})}},Inputmask.extendDefaults=function(t){$.extend(Inputmask.prototype.defaults,t)},Inputmask.extendDefinitions=function(t){$.extend(Inputmask.prototype.defaults.definitions,t)},Inputmask.extendAliases=function(t){$.extend(Inputmask.prototype.defaults.aliases,t)},Inputmask.format=function(t,e,i){var n=$.extend(!0,{},Inputmask.prototype.defaults,e);return resolveAlias(n.alias,e,n),maskScope({action:"format",value:t,metadata:i},generateMaskSet(n,e&&void 0!==e.definitions),n)},Inputmask.unmask=function(t,e){var i=$.extend(!0,{},Inputmask.prototype.defaults,e);return resolveAlias(i.alias,e,i),maskScope({action:"unmaskedvalue",value:t},generateMaskSet(i,e&&void 0!==e.definitions),i)},Inputmask.isValid=function(t,e){var i=$.extend(!0,{},Inputmask.prototype.defaults,e);return resolveAlias(i.alias,e,i),maskScope({action:"isValid",value:t},generateMaskSet(i,e&&void 0!==e.definitions),i)},Inputmask.escapeRegex=function(t){var e=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"];return t.replace(new RegExp("(\\"+e.join("|\\")+")","gim"),"\\$1")},Inputmask.keyCode={ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91};var ua=navigator.userAgent,iphone=null!==ua.match(new RegExp("iphone","i")),androidchrome=null!==ua.match(new RegExp("android.*chrome.*","i")),androidfirefox=null!==ua.match(new RegExp("android.*firefox.*","i")),PasteEventType=isInputEventSupported("paste")?"paste":isInputEventSupported("input")?"input":"propertychange";return window.Inputmask=Inputmask,Inputmask});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
